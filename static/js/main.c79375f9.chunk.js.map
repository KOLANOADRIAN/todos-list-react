{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","type","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","class","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c79375f9.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport\"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(newTaskContent.trim() === \"\") {\r\n            return;\r\n        }\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"container__form \" onSubmit={onFormSubmit}>\r\n            <input \r\n            value={newTaskContent}\r\n            className=\"container__input \" \r\n            type=\"text\" \r\n            placeholder=\"Co jest do zrobienia ?\" \r\n            onChange={(event) => setNewTaskContent(event.target.value)}\r\n            />\r\n            <button className=\"container__button \">Dodaj zadanie</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n  <ul className=\"container__list\">\r\n    {tasks.map(task => (\r\n      <li\r\n        className={`container__listIteam ${\r\n          task.done && hideDone ? \"tasks__item--hidden\" : \"\"\r\n        }`}\r\n      >\r\n        <button \r\n        className=\"tasks__buttonToggle tasks__buttonToggle--done \"\r\n        onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \" âœ” \" : \"\"}\r\n        </button>\r\n        <span\r\n          className={`\"tasks__content${\r\n            task.done ? \" tasks__content--done\" : \" \"\r\n          }\"`}\r\n        >\r\n          {task.id} - {task.content} \r\n        </span>\r\n        <button \r\n        className=\"tasks__buttonRemove tasks__buttonRemove--done\"\r\n        onClick={() => removeTask(task.id)}\r\n        >\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n  if (tasks.length === 0) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"bottom__buttons \">\r\n      <button onClick={toggleHideDone} className=\"buttons__button \">\r\n        {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n      </button>\r\n      <button\r\n        onClick={setAllDone}\r\n        className=\"buttons__button\"\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        UkoÅ„cz wszystkie\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__header\">\r\n            <h2 className=\"container__caption--bottom\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n)\r\n\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n    <div class=\"container\">\r\n        {children}\r\n    </div>\r\n)\r\nexport default Container;","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false);\r\n  const [tasks, setTasks] = useState([\r\n    \r\n  ]);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone((hideDone) => !hideDone);\r\n  };\r\n\r\n\r\n  const removeTask = (id) => {\r\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done };\r\n        }\r\n        return task;\r\n      })\r\n    );\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks(tasks => tasks.map(task => ({ \r\n      ...task, \r\n      done: true,\r\n    })));\r\n  };\r\n\r\n  const addNewTask = (newTaskContent) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content: newTaskContent,\r\n        done: false,\r\n        id: tasks.length === 0 ? 1: tasks[tasks.length - 1].id + 1,\r\n      },\r\n    ]);\r\n  };\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadaÅ„\" />\r\n\r\n      <Section title=\"Dodaj nowe zadanie\" body={<Form addNewTask={addNewTask} />} />\r\n\r\n      <Section\r\n        title=\"Lista zadaÅ„\"\r\n        body={\r\n          < Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toggleHideDone={toggleHideDone}\r\n            setAllDone={setAllDone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}