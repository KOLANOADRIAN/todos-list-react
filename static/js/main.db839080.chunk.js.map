{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","type","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","class","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db839080.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport\"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"container__form \" onSubmit={onFormSubmit}>\r\n            <input \r\n            value={newTaskContent}\r\n            className=\"container__input \" \r\n            type=\"text\" \r\n            placeholder=\"Co jest do zrobienia ?\" \r\n            onChange={(event) => setNewTaskContent(event.target.value)}\r\n            />\r\n            <button className=\"container__button \">Dodaj zadanie</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n  <ul className=\"container__list\">\r\n    {tasks.map(task => (\r\n      <li\r\n        className={`container__listIteam ${\r\n          task.done && hideDone ? \"tasks__item--hidden\" : \"\"\r\n        }`}\r\n      >\r\n        <button \r\n        className=\"tasks__buttonToggle tasks__buttonToggle--done \"\r\n        onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \" âœ” \" : \"\"}\r\n        </button>\r\n        <span\r\n          className={`\"tasks__content${\r\n            task.done ? \" tasks__content--done\" : \" \"\r\n          }\"`}\r\n        >\r\n          {task.id} - {task.content} \r\n        </span>\r\n        <button \r\n        className=\"tasks__buttonRemove tasks__buttonRemove--done\"\r\n        onClick={() => removeTask(task.id)}\r\n        >\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n  if (tasks.length === 0) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"bottom__buttons \">\r\n      <button onClick={toggleHideDone} className=\"buttons__button \">\r\n        {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n      </button>\r\n      <button\r\n        onClick={setAllDone}\r\n        className=\"buttons__button\"\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        UkoÅ„cz wszystkie\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__header\">\r\n            <h2 className=\"container__caption--bottom\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n)\r\n\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n    <div class=\"container\">\r\n        {children}\r\n    </div>\r\n)\r\nexport default Container;","import React, { useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([\n   \n  ]);\n\n  const toggleHideDone = () => {\n    setHideDone((hideDone) => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks((tasks) =>\n      tasks.map((task) => {\n        if (task.id === id) {\n          return { ...task, done: !task.done };\n        }\n        return task;\n      })\n    );\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({ \n      ...task, \n      done: true,\n    })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length === 0 ? 1: tasks[tasks.length - 1].id + 1,\n      },\n    ]);\n  };\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n\n      <Section title=\"Dodaj nowe zadanie\" body={<Form addNewTask={addNewTask} />} />\n\n      <Section\n        title=\"Lista zadaÅ„\"\n        body={\n          < Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}